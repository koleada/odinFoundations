******************************************* USE DEFER IN EVERY SINGLE <SCRIPT> or events wont work & JS will generally be weird !!!!! ******************************************************************

Now that we can alter the DOM we can use EVENTS to dynamically change things as users click, type etc. 

There are 3 main ways to achieve this: 
1. specify function attributes directly on HTML elements 
** not ideal as we can only set 1 "onclick" property per element 

2. Set properties of form on[eventType] (onclick, onmousedown, etc) on the DOM nodes in your JavaScript 
** still can only handle 1 of each event per element

3. Attach event listeners to the DOM nodes in your JavaScript 
** these are the preferred method but the others are also common and useful. This is a bit more complex to set up but much more powerful.

All of these can be used with functions we create ourselves too, they do not have to be built in functions. As shown below: 

method 1 with our own defined function:
<button onclick="alertFunction()">CLICK ME BABY</button>
// the JavaScript file 
// METHOD 1
function alertFunction() {
  alert("YAY! YOU DID IT!");
}
-------------------------------------
method 2 and 3 with our own function: 
<button id="btn">CLICK ME BABY</button>

const btn = document.querySelector('#btn')

// METHOD 2 (Element.event = () => function())
btn.onclick = () => alert("Hello World");

// METHOD 3 (element.addEventListener('eventType', (e) => { //stuff here});  )
const btn = document.querySelector('#btn');
btn.addEventListener('click', () => {
  alert("Hello World");
});

** we can alter the syntax of the third method slightly by removing the => and adding a function name as shown below: 
btn.addEventListener('click', function (e) {
  console.log(e);
});
** also note we can still pass in "e" to get info about the event using either syntax, in the first one shown we would just put 'e' inside the () (without quotes)

-------------------------------------
we can pass in "e" to the event listen to put more information about the event in the console or alert it or whatever we want ex: 
btn.addEventListener('click', function (e) {
  console.log(e.target);
}); 

or we could do

btn.addEventListener('click', function (e) {
    e.target.style.background = 'blue';
});
changes the background of the element that triggered the event to blue. we can also add other other methods below the background line to further manipulate the DOM and give a much more
unique and interactive experience  

** the "e" that is passed in to the function is an object that references the event itself. It is "a callback from addEventListener. This object comes with many useful properties
and methods built into it, such as which mouse button or key was pressed or info about the events target. THe target is the DOM node that the event was triggered from. For example 
console.log(e.target) will return the entire element from the DOM. (again just a reminder, the DOM is dynamic and is not necessarily the same as the HTML)

** we can also create our own methods and set our listeners such that they call our custom method when the event is triggered. Any of the 3 methdos can do this simply jsut 
change the method call to one of our own methods.
-------------------------------------
we can also use document.querySelectorAll() to select all elements of a certain class or type (eg span or button)
this allows us to add events for multiple elements by just adding a single event listener to a single variable created using querySelectorAll. 

Useful events: click, dblclick, keydown, keyup. full list of events + explanations here https://www.w3schools.com/jsref/dom_obj_event.asp
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Adding listeners to a group of nodes: 

- we can use the querySelectorAll('selector') method to return a list of nodes matching the selector. These nodes will be contained in a node list which behaves and looks like an 
array. We can then iterate through this nodeList with a loop and add a listener to each element. Shown below: 

// buttons is a node list. It looks and acts much like an array.
const buttons = document.querySelectorAll('button');

// we use the .forEach method to iterate through each button
buttons.forEach((button) => {

  // and for each one we add a 'click' listener
  button.addEventListener('click', () => {
    alert(button.id);
  });
});
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
bubbling - if you click on a nested element you also technically clicked on all of its parents as well. Meaning that it will set off click events on the others as well.

if we dont want this we can just call "e.stopPropagation();" inside our event listeners body to only capture clicks on the 1 element that was actually clicked. Basically saying
stop the bubbling from happening.

capture - basically reverses the bubbling effect so if we click on a nested element with the e.stopPropagation() within the listener and also have "capture: true" inside the listener,
then t.target would log the parent node not the note that was actually clicked. Basically reverse bubble so itll go from outer most parent to inner child where the event actually happened

refer to https://www.youtube.com/watch?v=F1anRyL37lE or https://www.javascripttutorial.net/javascript-dom/javascript-events/ for more info on bubbling, capture and propagation 

we can also add "once: true" to the event listener which would only allow the listener to capture the event one time then it would unbind the listener after this 1 event happened. 
Basically behaving the same as element.removeEventListener() after the 1 event happened. This resets after the page is reloaded. This could be helpful for like a store checkout button
that you only want the user to click once. 